using System.Text.Json;
using GamerUncle.Mcp.Services;
using Microsoft.Extensions.DependencyInjection;
using Moq;
using Xunit;

namespace GamerUncle.Mcp.FunctionalTests;

public class McpProtocolFunctionalTests
{
    private static JsonElement ToJson(object obj) => JsonDocument.Parse(JsonSerializer.Serialize(obj)).RootElement;

    [Fact]
    public async Task ToolsCall_EndToEnd_ReturnsStructuredBlocks()
    {
    var (provider, agentMock) = TestHostBuilder.BuildHost();
    var server = provider.GetRequiredService<GamerUncleMcpServer>();

        var req = "{\"jsonrpc\":\"2.0\",\"id\":10,\"method\":\"tools/call\",\"params\":{\"name\":\"board_game_query\",\"arguments\":{\"query\":\"recommend coop\"}}}";
        var resp = await server.ProcessJsonRpcAsync(req);
        var json = ToJson(resp);

        Assert.Equal("2.0", json.GetProperty("jsonrpc").GetString());
        Assert.Equal(10, json.GetProperty("id").GetInt32());
        var content = json.GetProperty("result").GetProperty("content").EnumerateArray().ToList();
        Assert.Equal(2, content.Count);
        Assert.Equal("text", content[0].GetProperty("type").GetString());
        Assert.Equal("json", content[1].GetProperty("type").GetString());
        agentMock.Verify(a => a.GetRecommendationsAsync("recommend coop", It.IsAny<string?>()), Times.Once);
    }

    [Fact]
    public async Task SequentialCalls_WithSameConversationId_ReusesThread()
    {
    var (provider, agentMock) = TestHostBuilder.BuildHost();
    var server = provider.GetRequiredService<GamerUncleMcpServer>();
        var conversationId = Guid.NewGuid().ToString();

        // First call (no prior thread)
        var req1 = $"{{\"jsonrpc\":\"2.0\",\"id\":1,\"method\":\"tools/call\",\"params\":{{\"name\":\"board_game_query\",\"arguments\":{{\"query\":\"opening\",\"conversationId\":\"{conversationId}\"}}}}}}";
        var resp1 = ToJson(await server.ProcessJsonRpcAsync(req1));
        var threadId1 = resp1.GetProperty("result").GetProperty("content").EnumerateArray().ElementAt(1).GetProperty("json").GetProperty("threadId").GetString();
        Assert.False(string.IsNullOrWhiteSpace(threadId1));

        // Agent mock will record second call using previous thread id
        var req2 = $"{{\"jsonrpc\":\"2.0\",\"id\":2,\"method\":\"tools/call\",\"params\":{{\"name\":\"board_game_query\",\"arguments\":{{\"query\":\"followup\",\"conversationId\":\"{conversationId}\"}}}}}}";
        var resp2 = ToJson(await server.ProcessJsonRpcAsync(req2));
        var threadId2 = resp2.GetProperty("result").GetProperty("content").EnumerateArray().ElementAt(1).GetProperty("json").GetProperty("threadId").GetString();

        // We expect the tool to pass previous thread as the thread parameter; we can only infer reuse via agentMock call arguments ordering.
        agentMock.Verify(a => a.GetRecommendationsAsync("opening", It.IsAny<string?>()), Times.Once);
        agentMock.Verify(a => a.GetRecommendationsAsync("followup", It.IsAny<string?>()), Times.Once);
        Assert.False(string.IsNullOrWhiteSpace(threadId2));
    }

    [Fact]
    public async Task AutoGeneratedConversationId_RemainsStableAcrossFollowup()
    {
    var (provider, _) = TestHostBuilder.BuildHost();
    var server = provider.GetRequiredService<GamerUncleMcpServer>();

        var req1 = "{\"jsonrpc\":\"2.0\",\"id\":11,\"method\":\"tools/call\",\"params\":{\"name\":\"board_game_query\",\"arguments\":{\"query\":\"first question\"}}}";
        var resp1 = ToJson(await server.ProcessJsonRpcAsync(req1));
        var convId = resp1.GetProperty("result").GetProperty("content").EnumerateArray().ElementAt(1).GetProperty("json").GetProperty("conversationId").GetString();
        Assert.False(string.IsNullOrWhiteSpace(convId));

        var req2 = $"{{\"jsonrpc\":\"2.0\",\"id\":12,\"method\":\"tools/call\",\"params\":{{\"name\":\"board_game_query\",\"arguments\":{{\"query\":\"second question\",\"conversationId\":\"{convId}\"}}}}}}";
        var resp2 = ToJson(await server.ProcessJsonRpcAsync(req2));
        var convId2 = resp2.GetProperty("result").GetProperty("content").EnumerateArray().ElementAt(1).GetProperty("json").GetProperty("conversationId").GetString();
        Assert.Equal(convId, convId2);
    }

    [Fact]
    public async Task HistoryTrimming_WorksAtConfiguredLimit()
    {
    var (provider, _) = TestHostBuilder.BuildHost(maxHistory: 2);
    var server = provider.GetRequiredService<GamerUncleMcpServer>();
        var convId = Guid.NewGuid().ToString();

        for (int i = 0; i < 3; i++)
        {
            var req = $"{{\"jsonrpc\":\"2.0\",\"id\":{i},\"method\":\"tools/call\",\"params\":{{\"name\":\"board_game_query\",\"arguments\":{{\"query\":\"q{i}\",\"conversationId\":\"{convId}\"}}}}}}";
            await server.ProcessJsonRpcAsync(req);
        }

        // Inspect internal state via service
        var convoState = provider.GetRequiredService<IConversationStateService>();
        var convo = convoState.GetOrCreateConversation(convId);
        Assert.Equal(2, convo.QueryHistory.Count); // should be trimmed to last 2
        Assert.Equal("q1", convo.QueryHistory[0].Query);
        Assert.Equal("q2", convo.QueryHistory[1].Query);
    }
}
