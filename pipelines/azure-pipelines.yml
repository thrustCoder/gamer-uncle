trigger:
  branches:
    include:
      - main

pr:
  branches:
    include:
      - main

pool:
  vmImage: 'ubuntu-latest'

variables:
  buildConfiguration: 'Release'
  apiProject: 'services/api/GamerUncle.Api.csproj'
  functionAppProject: 'services/functions/GamerUncle.Function.BggSync/GamerUncle.Function.BggSync.csproj'
  mobileProject: 'apps/mobile'
  publishOutputApiProject: '$(Build.ArtifactStagingDirectory)/publish/api'
  publishOutputFunctionProject: '$(Build.ArtifactStagingDirectory)/publish/function'
  publishOutputMobileProject: '$(Build.ArtifactStagingDirectory)/publish/mobile'

stages:
- stage: Validation
  displayName: 'Pre-Build Validation'
  condition: eq(variables['Build.Reason'], 'PullRequest')
  jobs:
  - job: ValidateProject
    displayName: 'Validate Project Structure'
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '18.x'
      displayName: 'Install Node.js'
    
    - task: UseDotNet@2
      inputs:
        packageType: 'sdk'
        version: '8.x'
        installationPath: $(Agent.ToolsDirectory)/dotnet
    
    - script: |
        echo "🔍 Validating project structure..."
        
        # Validate mobile project
        if [ -f "$(mobileProject)/package.json" ]; then
          echo "✅ Mobile package.json exists"
        else
          echo "❌ Mobile package.json missing"
          exit 1
        fi
        
        # Validate API project
        if [ -f "$(apiProject)" ]; then
          echo "✅ API project file exists"
        else
          echo "❌ API project file missing"
          exit 1
        fi
        
        # Validate solution file
        if [ -f "gamer-uncle.sln" ]; then
          echo "✅ Solution file exists"
        else
          echo "❌ Solution file missing"
          exit 1
        fi
        
        echo "✅ Project structure validation passed"
      displayName: 'Validate Project Files'

- stage: DevBuild
  displayName: 'Dev Build'
  dependsOn: 
  - Validation
  condition: |
    or(
      and(
        eq(variables['Build.Reason'], 'PullRequest'),
        in(dependencies.Validation.result, 'Succeeded', 'Skipped')
      ),
      eq(variables['Build.SourceBranchName'], 'main')
    )
  jobs:
  - job: BuildApiJob
    displayName: 'Build and Publish API Artifacts'
    dependsOn: BuildMobileJob
    condition: |
      and(
        or(
          eq(variables['Build.Reason'], 'PullRequest'),
          eq(variables['Build.SourceBranchName'], 'main')
        ),
        in(dependencies.BuildMobileJob.result, 'Succeeded', 'SucceededWithIssues')
      )
    steps:
    - task: UseDotNet@2
      inputs:
        packageType: 'sdk'
        version: '8.x'
        installationPath: $(Agent.ToolsDirectory)/dotnet

    - task: DownloadBuildArtifacts@0
      inputs:
        buildType: 'current'
        downloadType: 'single'
        artifactName: 'dropMobile'
        downloadPath: '$(System.ArtifactsDirectory)'
      displayName: 'Download Mobile Artifacts'

    - task: ExtractFiles@1
      displayName: 'Extract Mobile Build'
      inputs:
        archiveFilePatterns: '$(System.ArtifactsDirectory)/dropMobile/mobile-web-build.zip'
        destinationFolder: '$(System.ArtifactsDirectory)/mobile-extracted'
        cleanDestinationFolder: true

    - script: dotnet restore $(apiProject)
      displayName: 'Restore API Dependencies'

    - script: dotnet build $(apiProject) --configuration $(buildConfiguration) --no-restore
      displayName: 'Build API Project'

    - script: dotnet publish $(apiProject) --configuration $(buildConfiguration) --output $(publishOutputApiProject) --no-build
      displayName: 'Publish API Project'

    - script: |
        echo "Copying mobile web build to API wwwroot..."
        mkdir -p $(publishOutputApiProject)/wwwroot
        if [ -d "$(System.ArtifactsDirectory)/mobile-extracted" ] && [ "$(ls -A $(System.ArtifactsDirectory)/mobile-extracted 2>/dev/null)" ]; then
          cp -r $(System.ArtifactsDirectory)/mobile-extracted/* $(publishOutputApiProject)/wwwroot/
          echo "Mobile files copied to wwwroot:"
          ls -la $(publishOutputApiProject)/wwwroot/
        else
          echo "Warning: No mobile build found to copy"
        fi
      displayName: 'Copy Mobile Build to API wwwroot'

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(publishOutputApiProject)'
        ArtifactName: 'dropApi'

  - job: BuildFunctionJob
    displayName: 'Build and Publish Function Artifacts'
    condition: |
      or(
        eq(variables['Build.Reason'], 'PullRequest'),
        eq(variables['Build.SourceBranchName'], 'main')
      )
    steps:
    - task: UseDotNet@2
      inputs:
        packageType: 'sdk'
        version: '8.x'
        installationPath: $(Agent.ToolsDirectory)/dotnet

    - script: dotnet restore $(functionAppProject)
      displayName: 'Restore Function Dependencies'

    - script: dotnet build $(functionAppProject) --configuration $(buildConfiguration) --no-restore
      displayName: 'Build Function App'

    - script: dotnet publish $(functionAppProject) --configuration $(buildConfiguration) --output $(publishOutputFunctionProject) --no-build
      displayName: 'Publish Function App'

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(publishOutputFunctionProject)'
        ArtifactName: 'dropFunction'

  - job: BuildMobileJob
    displayName: 'Build and Publish Mobile Artifacts'
    condition: |
      or(
        eq(variables['Build.Reason'], 'PullRequest'),
        eq(variables['Build.SourceBranchName'], 'main')
      )
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '18.x'
      displayName: 'Install Node.js'

    - script: |
        echo "Installing Expo CLI globally..."
        npm install -g @expo/cli@latest
        echo "Expo CLI version:"
        npx expo --version
        echo "Node.js version:"
        node --version
        echo "npm version:"
        npm --version
      displayName: 'Setup Expo CLI'

    - script: |
        cd $(mobileProject)
        echo "Installing mobile dependencies..."
        
        # Set npm configuration for CI optimization
        npm config set audit false
        npm config set fund false
        npm config set prefer-offline true
        
        # Check if package-lock.json is in sync with package.json
        echo "🔍 Checking package-lock.json sync status..."
        if npm ci --dry-run 2>/dev/null; then
          echo "✅ package-lock.json is in sync, using npm ci"
          npm ci --prefer-offline --no-audit --ignore-scripts --silent
        else
          echo "⚠️ package-lock.json out of sync, updating and using npm install"
          npm install --prefer-offline --no-audit --ignore-scripts --silent
          
          # Generate updated lock file for future runs
          echo "📝 Updated package-lock.json generated"
        fi
        
        # Verify critical dependencies are installed
        echo "🔍 Verifying critical dependencies..."
        if [ ! -d "node_modules/@expo/cli" ] && [ ! -d "node_modules/.bin/expo" ]; then
          echo "❌ Expo CLI not found in dependencies, installing globally as fallback"
          npm install -g @expo/cli@latest --silent
        fi
        
        # Verify webpack is available (required for builds)
        if [ ! -d "node_modules/webpack" ]; then
          echo "❌ Webpack not found, this may cause build issues"
          exit 1
        fi
        
        echo "✅ Dependencies installed successfully"
        echo "📊 Node modules size:"
        du -sh node_modules 2>/dev/null || echo "Could not determine size"
        
        # Verify key binaries are available
        echo "🔍 Verifying build tools..."
        which node && echo "✅ Node.js available"
        which npm && echo "✅ npm available"
        npx expo --version && echo "✅ Expo CLI available" || echo "⚠️ Expo CLI check failed"
      displayName: 'Install Mobile Dependencies'
      timeoutInMinutes: 10

    - script: |
        cd $(mobileProject)
        echo "Validating project structure..."
        echo "Current directory: $(pwd)"
        echo "Project files:"
        ls -la
        echo "Checking essential files..."
        [ -f "package.json" ] && echo "✓ package.json exists" || (echo "✗ package.json missing" && exit 1)
        [ -f "app.json" ] && echo "✓ app.json exists" || (echo "✗ app.json missing" && exit 1)
        [ -f "App.tsx" ] && echo "✓ App.tsx exists" || (echo "✗ App.tsx missing" && exit 1)
        [ -d "node_modules" ] && echo "✓ node_modules exists" || (echo "✗ node_modules missing" && exit 1)
        echo "Project structure validation passed"
      displayName: 'Validate Mobile Project Structure'

    - script: |
        cd $(mobileProject)
        echo "🚀 Starting Expo web export..."
        echo "📁 Output directory: $(publishOutputMobileProject)"
        
        # Check Expo CLI version and validate environment
        echo "🔍 Checking build environment..."
        echo "Expo CLI version:"
        npx expo --version || exit 1
        echo "Node.js version: $(node --version)"
        echo "npm version: $(npm --version)"
        
        # Validate project before build
        echo "🔍 Validating project files..."
        if [ ! -f "app.json" ] || [ ! -f "App.tsx" ]; then
          echo "❌ Essential project files missing"
          exit 1
        fi
        
        # Clean any previous build artifacts
        echo "🧹 Cleaning previous build artifacts..."
        rm -rf dist/ .expo/ node_modules/.cache/ || true
        
        # Set environment variables for production build
        export NODE_ENV=production
        export CI=true
        export EXPO_NO_TELEMETRY=1
        
        # Build using npm script with enhanced error handling
        echo "🔨 Building web app for production..."
        BUILD_SUCCESS=false
        
        if timeout 900 npm run build:web; then
          echo "✅ npm build:web succeeded"
          BUILD_SUCCESS=true
          
          # Check if files are in default dist location
          if [ -d "dist" ] && [ ! -z "$(ls -A dist 2>/dev/null)" ]; then
            echo "📦 Moving files from dist/ to output directory..."
            mkdir -p $(publishOutputMobileProject)
            cp -r dist/* $(publishOutputMobileProject)/
            echo "✅ Files moved to $(publishOutputMobileProject)"
          else
            echo "❌ No dist directory found after build"
            BUILD_SUCCESS=false
          fi
        else
          echo "⚠️ npm build:web failed or timed out, trying direct expo export..."
        fi
        
        # Fallback to direct expo export if npm script failed
        if [ "$BUILD_SUCCESS" = false ]; then
          echo "🔄 Attempting fallback build with expo export..."
          if timeout 900 npx expo export --platform web --output-dir $(publishOutputMobileProject) --clear; then
            echo "✅ Direct expo export succeeded"
            BUILD_SUCCESS=true
          else
            echo "❌ All build methods failed"
            echo "🔍 Checking for any partial build outputs..."
            ls -la $(publishOutputMobileProject) 2>/dev/null || echo "No output directory found"
            ls -la dist/ 2>/dev/null || echo "No dist directory found"
            exit 1
          fi
        fi
        
        # Verify we have content and validate build quality
        echo "🔍 Verifying build artifacts..."
        if [ -d "$(publishOutputMobileProject)" ] && [ "$(ls -A $(publishOutputMobileProject) 2>/dev/null)" ]; then
          echo "✅ Build artifacts created successfully"
          echo "📊 Build contents:"
          ls -la $(publishOutputMobileProject)
          
          # Check for essential web files
          if [ -f "$(publishOutputMobileProject)/index.html" ]; then
            echo "✅ index.html found"
          else
            echo "⚠️ index.html not found - this may cause deployment issues"
          fi
          
          # Check total size
          BUILD_SIZE=$(du -sh $(publishOutputMobileProject) | cut -f1)
          echo "📏 Total build size: $BUILD_SIZE"
        else
          echo "❌ No build artifacts found"
          exit 1
        fi
      displayName: 'Build and Export Mobile Web Bundle'
      timeoutInMinutes: 20

    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: '$(publishOutputMobileProject)'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/mobile-web-build.zip'
        replaceExistingArchive: true
      displayName: 'Archive Mobile Build'

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)/mobile-web-build.zip'
        ArtifactName: 'dropMobile'
      displayName: 'Publish Mobile Artifacts'

- stage: DebugStage
  displayName: 'Debug Pipeline Variables'
  dependsOn: 
    - DevBuild
    - DevTest
  condition: |
    or(
      and(succeeded(), ne(variables['Build.Reason'], 'PullRequest')),
      failed()
    )
  jobs:
  - job: DebugVariables
    displayName: 'Print Debug Information'
    steps:
    - script: |
        echo "=== PIPELINE DEBUG INFORMATION ==="
        echo "Build.Reason: $(Build.Reason)"
        echo "Build.SourceBranchName: $(Build.SourceBranchName)"
        echo "Build.SourceBranch: $(Build.SourceBranch)"
        echo "Build.DefinitionName: $(Build.DefinitionName)"
        echo "System.PullRequest.IsFork: $(System.PullRequest.IsFork)"
        echo "System.PullRequest.PullRequestId: $(System.PullRequest.PullRequestId)"
        echo "Agent.JobStatus: $(Agent.JobStatus)"
        echo "=== CONDITIONS CHECK ==="
        echo "succeeded(): should be true for deployment"
        echo "ne(variables['Build.Reason'], 'PullRequest'): $(ne(variables['Build.Reason'], 'PullRequest'))"
        echo "eq(variables['Build.SourceBranchName'], 'main'): $(eq(variables['Build.SourceBranchName'], 'main'))"
        echo "==================================="
      displayName: 'Debug Pipeline Variables'

- stage: DevDeployApi
  displayName: 'Dev Deploy Api'
  dependsOn: 
    - DevBuild
    - DevTest
  # Updated condition to be more reliable for post-merge deployments
  condition: |
    and(
      succeeded(), 
      ne(variables['Build.Reason'], 'PullRequest'),
      or(
        eq(variables['Build.SourceBranchName'], 'main'),
        eq(variables['Build.SourceBranch'], 'refs/heads/main')
      )
    )

  jobs:
  - deployment: DeployWebApp
    displayName: 'Deploy Web App'
    environment: 'Dev'
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: dropApi

          - task: AzureCLI@2
            displayName: 'Configure API App Settings'
            inputs:
              azureSubscription: 'gamer-uncle-dev-sc'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                az webapp config appsettings set \
                  --name gamer-uncle-dev-app-svc \
                  --resource-group gamer-uncle-dev-rg \
                  --settings \
                    'CosmosDb__Endpoint=https://gamer-uncle-dev-cosmos.documents.azure.com:443/' \
                    'CosmosDb__TenantId=c88223a3-60b3-4697-9374-209fc154bdf1'

          - task: AzureWebApp@1
            displayName: 'Deploy Web App'
            inputs:
              azureSubscription: 'gamer-uncle-dev-sc'
              appType: 'webApp'
              appName: 'gamer-uncle-dev-app-svc'
              package: '$(Pipeline.Workspace)/dropApi'


- stage: DevDeployFunctions
  displayName: 'Dev Deploy Functions'
  dependsOn: 
    - DevBuild
    - DevTest
  # Updated condition to be more reliable for post-merge deployments
  condition: |
    and(
      succeeded(), 
      ne(variables['Build.Reason'], 'PullRequest'),
      or(
        eq(variables['Build.SourceBranchName'], 'main'),
        eq(variables['Build.SourceBranch'], 'refs/heads/main')
      )
    )

  jobs:
  - deployment: DeployFunctionApp
    displayName: 'Deploy Function App'
    environment: 'Dev'
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: dropFunction

          - task: AzureCLI@2
            displayName: 'Configure Function App Settings'
            inputs:
              azureSubscription: 'gamer-uncle-dev-sc'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                echo "Setting Function App application settings..."
                az functionapp config appsettings set \
                  --name gamer-uncle-dev-function \
                  --resource-group gamer-uncle-dev-rg \
                  --settings \
                    'COSMOS_ENDPOINT=https://gamer-uncle-dev-cosmos.documents.azure.com:443/' \
                    'AZURE_TENANT_ID=c88223a3-60b3-4697-9374-209fc154bdf1' \
                    'AZURE_CLIENT_ID=bb090f27-f5ca-4d22-80be-7ef3392d1d26' \
                    'SyncGameCount=500'
                
                echo "Verifying settings were applied..."
                az functionapp config appsettings list \
                  --name gamer-uncle-dev-function \
                  --resource-group gamer-uncle-dev-rg \
                  --query "[?name=='COSMOS_ENDPOINT' || name=='AZURE_TENANT_ID' || name=='SyncGameCount']" \
                  -o table

          - task: AzureFunctionApp@1
            displayName: 'Deploy Function App (Consumption Linux)'
            inputs:
              azureSubscription: 'gamer-uncle-dev-sc'
              appType: 'functionAppLinux'
              appName: 'gamer-uncle-dev-function'
              package: '$(Pipeline.Workspace)/dropFunction'
              runtimeStack: 'DOTNET-ISOLATED|8.0'

          - task: AzureCLI@2
            displayName: 'Verify and Trigger Function'
            inputs:
              azureSubscription: 'gamer-uncle-dev-sc'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                echo "Waiting for Function App to be ready after deployment..."
                sleep 60
                
                echo "Checking Function App status..."
                az functionapp show \
                  --name gamer-uncle-dev-function \
                  --resource-group gamer-uncle-dev-rg \
                  --query "{state:state,runtime:linuxFxVersion,kind:kind}" -o table
                
                echo "Listing deployed functions..."
                FUNCTIONS=$(az functionapp function list \
                  --name gamer-uncle-dev-function \
                  --resource-group gamer-uncle-dev-rg \
                  --query "[].name" -o tsv 2>/dev/null || echo "")
                
                if [[ -z "$FUNCTIONS" ]]; then
                  echo "❌ No functions found. Waiting and retrying..."
                  sleep 30
                  FUNCTIONS=$(az functionapp function list \
                    --name gamer-uncle-dev-function \
                    --resource-group gamer-uncle-dev-rg \
                    --query "[].name" -o tsv 2>/dev/null || echo "")
                fi
                
                if [[ -z "$FUNCTIONS" ]]; then
                  echo "❌ No functions deployed! Check deployment logs"
                  exit 1
                else
                  echo "✅ Found functions: $FUNCTIONS"
                fi
                
                # Get function key
                echo "Getting Function App host key..."
                HOST_KEY=$(az functionapp keys list \
                  --name gamer-uncle-dev-function \
                  --resource-group gamer-uncle-dev-rg \
                  --query "masterKey" -o tsv)
                
                if [[ -z "$HOST_KEY" ]]; then
                  echo "❌ Could not get function key"
                  exit 1
                fi
                
                # Trigger function if it exists
                if [[ "$FUNCTIONS" == *"GameSyncHttpStart"* ]]; then
                  echo "✅ GameSyncHttpStart function found, triggering..."
                  
                  RESPONSE=$(curl -s -X POST \
                    "https://gamer-uncle-dev-function.azurewebsites.net/api/GameSyncHttpStart?code=$HOST_KEY" \
                    -H "Content-Type: application/json" \
                    -d '{}' \
                    -w "\nHTTP_CODE:%{http_code}" \
                    --include)
                  
                  echo "Response:"
                  echo "$RESPONSE"
                  
                  HTTP_CODE=$(echo "$RESPONSE" | grep -o "HTTP_CODE:[0-9]*" | cut -d: -f2)
                  
                  if [[ "$HTTP_CODE" == "2"* ]]; then
                    echo "✅ Function triggered successfully!"
                  else
                    echo "❌ Function trigger failed with status: $HTTP_CODE"
                    exit 1
                  fi
                else
                  echo "❌ GameSyncHttpStart function not found"
                  echo "Available functions: $FUNCTIONS"
                  exit 1
                fi

- stage: DevDeployMobile
  displayName: 'Dev Deploy Mobile'
  dependsOn: 
    - DevBuild
    - DevTest
  # Updated condition to be more reliable for post-merge deployments
  condition: |
    and(
      succeeded(), 
      ne(variables['Build.Reason'], 'PullRequest'),
      or(
        eq(variables['Build.SourceBranchName'], 'main'),
        eq(variables['Build.SourceBranch'], 'refs/heads/main')
      )
    )

  jobs:
  - deployment: DeployMobileApp
    displayName: 'Deploy Mobile Web App'
    environment: 'Dev'
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: dropMobile

          - task: ExtractFiles@1
            displayName: 'Extract Mobile Build'
            inputs:
              archiveFilePatterns: '$(Pipeline.Workspace)/dropMobile/mobile-web-build.zip'
              destinationFolder: '$(Pipeline.Workspace)/mobile-extracted'
              cleanDestinationFolder: true

          # This step could be used to deploy to Azure Static Web Apps or similar
          - script: |
              echo "Mobile web build extracted to: $(Pipeline.Workspace)/mobile-extracted"
              echo "Contents:"
              ls -la $(Pipeline.Workspace)/mobile-extracted/
              echo "Mobile web app is ready for deployment to hosting service"
            displayName: 'Verify Mobile Build Extraction'

          # Add actual deployment steps here when you have a hosting target
          # Example for Azure Static Web Apps:
          # - task: AzureStaticWebApp@0
          #   inputs:
          #     app_location: '$(Pipeline.Workspace)/mobile-extracted'
          #     api_location: ''
          #     output_location: ''
          #     azure_static_web_apps_api_token: $(AZURE_STATIC_WEB_APPS_API_TOKEN)

- stage: DevTest
  displayName: 'Dev Test'
  dependsOn: DevBuild
  jobs:
  - job: TestApiJob
    displayName: 'Run API Tests'
    condition: |
      or(
        eq(variables['Build.Reason'], 'PullRequest'),
        eq(variables['Build.SourceBranchName'], 'main')
      )
    steps:
    - task: UseDotNet@2
      inputs:
        packageType: 'sdk'
        version: '8.x'
        installationPath: $(Agent.ToolsDirectory)/dotnet

    - script: dotnet restore services/tests/api/GamerUncle.Api.Tests.csproj
      displayName: 'Restore API Test Dependencies'

    - script: dotnet test services/tests/api/GamerUncle.Api.Tests.csproj --configuration $(buildConfiguration) --logger trx --results-directory $(Agent.TempDirectory)
      displayName: 'Run API Unit Tests'

    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'VSTest'
        testResultsFiles: '$(Agent.TempDirectory)/*.trx'
        failTaskOnFailedTests: true
      displayName: 'Publish API Test Results'

  - job: TestPipelineJob
    displayName: 'Run Pipeline Tests'
    condition: |
      or(
        eq(variables['Build.Reason'], 'PullRequest'),
        eq(variables['Build.SourceBranchName'], 'main')
      )
    steps:
    - task: UseDotNet@2
      inputs:
        packageType: 'sdk'
        version: '8.x'
        installationPath: $(Agent.ToolsDirectory)/dotnet

    - script: dotnet restore pipelines/tests/GamerUncle.Pipeline.Tests.csproj
      displayName: 'Restore Pipeline Test Dependencies'

    - script: dotnet test pipelines/tests/GamerUncle.Pipeline.Tests.csproj --configuration $(buildConfiguration) --logger trx --results-directory $(Agent.TempDirectory)
      displayName: 'Run Pipeline Validation Tests'

    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'VSTest'
        testResultsFiles: '$(Agent.TempDirectory)/*.trx'
        failTaskOnFailedTests: true
      displayName: 'Publish Pipeline Test Results'

  - job: TestMobileJob
    displayName: 'Run Mobile Tests'
    condition: |
      or(
        eq(variables['Build.Reason'], 'PullRequest'),
        eq(variables['Build.SourceBranchName'], 'main')
      )
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '18.x'
      displayName: 'Install Node.js'

    - script: |
        cd $(mobileProject)
        # Ensure dependencies are installed for unit tests
        echo "Installing mobile dependencies for unit tests..."
        
        # Check if package-lock.json is in sync with package.json
        if npm ci --dry-run 2>/dev/null; then
          echo "✅ package-lock.json is in sync, using npm ci"
          npm ci --prefer-offline --no-audit --ignore-scripts
        else
          echo "⚠️ package-lock.json out of sync, using npm install"
          npm install --prefer-offline --no-audit --ignore-scripts
        fi
      displayName: 'Install Mobile Dependencies'

    - script: |
        cd $(mobileProject)
        echo "Running mobile unit tests..."
        
        # Run tests with CI optimizations
        export CI=true
        export NODE_ENV=test
        
        # Run tests with proper error handling
        if npm test -- --watchAll=false --coverage=false --passWithNoTests; then
          echo "✅ Mobile tests passed"
        else
          echo "⚠️ Mobile tests completed with issues (this may be expected for new projects)"
        fi
      displayName: 'Run Mobile Tests'
      continueOnError: true

- stage: FunctionalTestsPR
  displayName: 'Dev Functional Tests (PR)'
  dependsOn: DevBuild
  condition: eq(variables['Build.Reason'], 'PullRequest')
  jobs:
  - job: RunLocalFunctionalTests
    displayName: 'Start API and Run Functional Tests'
    steps:
    - task: UseDotNet@2
      inputs:
        packageType: 'sdk'
        version: '8.x'
        installationPath: $(Agent.ToolsDirectory)/dotnet

    - script: dotnet restore $(apiProject)
      displayName: 'Restore API Dependencies'

    - script: dotnet build $(apiProject) --configuration $(buildConfiguration) --no-restore
      displayName: 'Build API Project'

    - script: dotnet restore services/tests/functional/GamerUncle.Api.FunctionalTests.csproj
      displayName: 'Restore Functional Test Dependencies'

    - script: dotnet build services/tests/functional/GamerUncle.Api.FunctionalTests.csproj --configuration $(buildConfiguration) --no-restore
      displayName: 'Build Functional Tests'

    - script: |
        echo "Starting API in background..."
        dotnet run --project $(apiProject) --configuration $(buildConfiguration) --no-build --urls "http://localhost:5000" &
        API_PID=$!
        echo "API PID: $API_PID"
        
        echo "Waiting for API to start..."
        sleep 15
        
        # Test if API is responding
        API_READY=false
        for i in {1..24}; do
          echo "Testing API connectivity... attempt $i/24"
          if curl -f http://localhost:5000/ 2>/dev/null; then
            echo "✅ API is responding on root endpoint"
            API_READY=true
            break
          elif curl -f http://localhost:5000/api/recommendations -X POST -H "Content-Type: application/json" -d '{"query":"test"}' 2>/dev/null; then
            echo "✅ API is responding on recommendations endpoint"
            API_READY=true
            break
          elif curl -s http://localhost:5000/ 2>/dev/null; then
            echo "✅ API is responding (got some response)"
            API_READY=true
            break
          fi
          echo "⏳ Waiting for API... attempt $i/24"
          sleep 5
        done
        
        if [ "$API_READY" = false ]; then
          echo "❌ API failed to start or is not responding after 2 minutes"
          ps aux | grep dotnet || true
          netstat -tlnp | grep 5000 || true
          kill $API_PID 2>/dev/null || true
          exit 1
        fi
        
        echo "🧪 Running functional tests..."
        export TEST_ENVIRONMENT=Local
        export API_BASE_URL=http://localhost:5000
        
        # Run the tests
        TEST_RESULT=0
        dotnet test services/tests/functional/GamerUncle.Api.FunctionalTests.csproj --configuration $(buildConfiguration) --logger trx --results-directory $(Agent.TempDirectory) || TEST_RESULT=$?
        
        echo "🧹 Stopping API service..."
        kill $API_PID 2>/dev/null || true
        
        exit $TEST_RESULT
      displayName: 'Start API and Run Functional Tests'

    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'VSTest'
        testResultsFiles: '$(Agent.TempDirectory)/*.trx'
        failTaskOnFailedTests: true
      displayName: 'Publish Functional Test Results'
      condition: always()

- stage: FunctionalTestsDev
  displayName: 'Dev Functional Tests'
  dependsOn: DevDeployApi
  # Updated condition to be more reliable for post-merge deployments
  condition: |
    and(
      succeeded(), 
      ne(variables['Build.Reason'], 'PullRequest'),
      or(
        eq(variables['Build.SourceBranchName'], 'main'),
        eq(variables['Build.SourceBranch'], 'refs/heads/main')
      )
    )
  jobs:
  - job: RunDevFunctionalTests
    displayName: 'Run Functional Tests Against Dev Environment'
    steps:
    - task: UseDotNet@2
      inputs:
        packageType: 'sdk'
        version: '8.x'
        installationPath: $(Agent.ToolsDirectory)/dotnet

    - script: dotnet restore services/tests/functional/GamerUncle.Api.FunctionalTests.csproj
      displayName: 'Restore Functional Test Dependencies'

    - script: |
        export TEST_ENVIRONMENT=Dev
        export API_BASE_URL=https://gamer-uncle-dev-app-svc-fre7dsc5hecdh7fn.westus-01.azurewebsites.net
        dotnet test services/tests/functional/GamerUncle.Api.FunctionalTests.csproj --configuration $(buildConfiguration) --logger trx --results-directory $(Agent.TempDirectory)
      displayName: 'Run Functional Tests Against Dev Environment'

    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'VSTest'
        testResultsFiles: '$(Agent.TempDirectory)/*.trx'
        failTaskOnFailedTests: true
      displayName: 'Publish Dev Functional Test Results'

# E2E Tests for Mobile App (Dev Environment)  
- stage: E2ETestsDev
  displayName: 'Dev Mobile E2E Tests'
  dependsOn: DevDeployMobile
  # Updated condition to be more reliable for post-merge deployments
  condition: |
    and(
      succeeded(), 
      ne(variables['Build.Reason'], 'PullRequest'),
      or(
        eq(variables['Build.SourceBranchName'], 'main'),
        eq(variables['Build.SourceBranch'], 'refs/heads/main')
      )
    )
  jobs:
  - job: RunDevE2ETests
    displayName: 'Run E2E Tests Against Dev Environment'
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '18.x'
      displayName: 'Install Node.js'

    - script: |
        cd $(mobileProject)
        echo "Installing mobile dependencies for Dev E2E tests..."
        
        # Check if package-lock.json is in sync with package.json
        if npm ci --dry-run 2>/dev/null; then
          echo "✅ package-lock.json is in sync, using npm ci"
          npm ci --prefer-offline --no-audit
        else
          echo "⚠️ package-lock.json out of sync, using npm install"
          npm install --prefer-offline --no-audit
        fi
      displayName: 'Install Mobile Dependencies'

    - script: |
        cd $(mobileProject)
        npx playwright install --with-deps chromium
      displayName: 'Install Playwright Browsers'

    - script: |
        cd $(mobileProject)
        export CI=true
        export E2E_BASE_URL="https://gamer-uncle-dev-app-svc-fre7dsc5hecdh7fn.westus-01.azurewebsites.net"
        npm run test:e2e:ci
      displayName: 'Run E2E Tests Against Dev'
      continueOnError: true
      timeoutInMinutes: 20

    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '$(mobileProject)/test-results/*.xml'
        failTaskOnFailedTests: true
      displayName: 'Publish Dev E2E Test Results'
      condition: always()

    - task: PublishBuildArtifacts@1
      inputs:
        pathToPublish: '$(mobileProject)/test-results'
        artifactName: 'e2e-test-results-dev'
      displayName: 'Publish Dev E2E Test Artifacts'
      condition: always()
