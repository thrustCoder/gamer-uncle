trigger:
  branches:
    include:
      - main
  paths:
    include:
      - services/api/*
      - services/functions/*
      - services/tests/*
      - apps/mobile/*
      - pipelines/tests/*

pr:
  branches:
    include:
      - main
  paths:
    include:
      - services/api/*
      - services/functions/*
      - services/tests/*
      - apps/mobile/*
      - pipelines/tests/*

pool:
  vmImage: 'ubuntu-latest'

variables:
  buildConfiguration: 'Release'
  apiProject: 'services/api/GamerUncle.Api.csproj'
  functionAppProject: 'services/functions/GamerUncle.Function.BggSync/GamerUncle.Function.BggSync.csproj'
  mobileProject: 'apps/mobile'
  publishOutputApiProject: '$(Build.ArtifactStagingDirectory)/publish/api'
  publishOutputFunctionProject: '$(Build.ArtifactStagingDirectory)/publish/function'
  publishOutputMobileProject: '$(Build.ArtifactStagingDirectory)/publish/mobile'

stages:
- stage: DevBuild
  displayName: 'Dev Build'
  jobs:
  - job: BuildApiJob
    displayName: 'Build and Publish API Artifacts'
    condition: |
      or(
        contains(variables['Build.SourceVersionMessage'], 'services/api'),
        contains(variables['Build.SourceVersionMessage'], 'services/tests'),
        eq(variables['Build.SourceBranchName'], 'main')
      )
    steps:
    - task: UseDotNet@2
      inputs:
        packageType: 'sdk'
        version: '8.x'
        installationPath: $(Agent.ToolsDirectory)/dotnet

    - script: dotnet restore $(apiProject)
      displayName: 'Restore API Dependencies'

    - script: dotnet build $(apiProject) --configuration $(buildConfiguration) --no-restore
      displayName: 'Build API Project'

    - script: dotnet publish $(apiProject) --configuration $(buildConfiguration) --output $(publishOutputApiProject) --no-build
      displayName: 'Publish API Project'

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(publishOutputApiProject)'
        ArtifactName: 'dropApi'

  - job: BuildFunctionJob
    displayName: 'Build and Publish Function Artifacts'
    condition: |
      or(
        contains(variables['Build.SourceVersionMessage'], 'services/functions'),
        eq(variables['Build.SourceBranchName'], 'main')
      )
    steps:
    - task: UseDotNet@2
      inputs:
        packageType: 'sdk'
        version: '8.x'
        installationPath: $(Agent.ToolsDirectory)/dotnet

    - script: dotnet restore $(functionAppProject)
      displayName: 'Restore Function Dependencies'

    - script: dotnet build $(functionAppProject) --configuration $(buildConfiguration) --no-restore
      displayName: 'Build Function App'

    - script: dotnet publish $(functionAppProject) --configuration $(buildConfiguration) --output $(publishOutputFunctionProject) --no-build
      displayName: 'Publish Function App'

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(publishOutputFunctionProject)'
        ArtifactName: 'dropFunction'

  - job: BuildMobileJob
    displayName: 'Build and Publish Mobile Artifacts'
    condition: |
      or(
        contains(variables['Build.SourceVersionMessage'], 'apps/mobile'),
        eq(variables['Build.SourceBranchName'], 'main')
      )
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '18.x'
      displayName: 'Install Node.js'

    - script: |
        cd $(mobileProject)
        npm install
      displayName: 'Install Mobile Dependencies'

    - script: |
        cd $(mobileProject)
        npm run web
      displayName: 'Build Mobile Web Bundle'
      continueOnError: true

    - script: |
        cd $(mobileProject)
        npx expo export --platform web --output-dir $(publishOutputMobileProject)
      displayName: 'Export Mobile Web Build'

    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: '$(publishOutputMobileProject)'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/mobile-web-build.zip'
        replaceExistingArchive: true
      displayName: 'Archive Mobile Build'

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)/mobile-web-build.zip'
        ArtifactName: 'dropMobile'
      displayName: 'Publish Mobile Artifacts'

- stage: DevDeployApi
  displayName: 'Dev Deploy Api'
  dependsOn: 
    - DevBuild
    - DevTest
  condition: |
    and(
      succeeded(), 
      ne(variables['Build.Reason'], 'PullRequest'),
      or(
        contains(variables['Build.SourceVersionMessage'], 'services/api'),
        contains(variables['Build.SourceVersionMessage'], 'services/tests'),
        eq(variables['Build.SourceBranchName'], 'main')
      )
    )

  jobs:
  - deployment: DeployWebApp
    displayName: 'Deploy Web App'
    environment: 'Dev'
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: dropApi

          - task: AzureCLI@2
            displayName: 'Configure API App Settings'
            inputs:
              azureSubscription: 'gamer-uncle-dev-sc'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                az webapp config appsettings set \
                  --name gamer-uncle-dev-app-svc \
                  --resource-group gamer-uncle-dev-rg \
                  --settings \
                    'CosmosDb__Endpoint=https://gamer-uncle-dev-cosmos.documents.azure.com:443/' \
                    'CosmosDb__TenantId=c88223a3-60b3-4697-9374-209fc154bdf1'

          - task: AzureWebApp@1
            displayName: 'Deploy Web App'
            inputs:
              azureSubscription: 'gamer-uncle-dev-sc'
              appType: 'webApp'
              appName: 'gamer-uncle-dev-app-svc'
              package: '$(Pipeline.Workspace)/dropApi'


- stage: DevDeployFunctions
  displayName: 'Dev Deploy Functions'
  dependsOn: 
    - DevBuild
    - DevTest
  condition: |
    and(
      succeeded(), 
      ne(variables['Build.Reason'], 'PullRequest'),
      or(
        contains(variables['Build.SourceVersionMessage'], 'services/functions'),
        eq(variables['Build.SourceBranchName'], 'main')
      )
    )

  jobs:
  - deployment: DeployFunctionApp
    displayName: 'Deploy Function App'
    environment: 'Dev'
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: dropFunction

          - task: AzureCLI@2
            displayName: 'Configure Function App Settings'
            inputs:
              azureSubscription: 'gamer-uncle-dev-sc'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                echo "Setting Function App application settings..."
                az functionapp config appsettings set \
                  --name gamer-uncle-dev-function \
                  --resource-group gamer-uncle-dev-rg \
                  --settings \
                    'COSMOS_ENDPOINT=https://gamer-uncle-dev-cosmos.documents.azure.com:443/' \
                    'AZURE_TENANT_ID=c88223a3-60b3-4697-9374-209fc154bdf1' \
                    'AZURE_CLIENT_ID=bb090f27-f5ca-4d22-80be-7ef3392d1d26' \
                    'SyncGameCount=500'
                
                echo "Verifying settings were applied..."
                az functionapp config appsettings list \
                  --name gamer-uncle-dev-function \
                  --resource-group gamer-uncle-dev-rg \
                  --query "[?name=='COSMOS_ENDPOINT' || name=='AZURE_TENANT_ID' || name=='SyncGameCount']" \
                  -o table

          - task: AzureFunctionApp@1
            displayName: 'Deploy Function App (Consumption Linux)'
            inputs:
              azureSubscription: 'gamer-uncle-dev-sc'
              appType: 'functionAppLinux'
              appName: 'gamer-uncle-dev-function'
              package: '$(Pipeline.Workspace)/dropFunction'
              runtimeStack: 'DOTNET-ISOLATED|8.0'

          - task: AzureCLI@2
            displayName: 'Verify and Trigger Function'
            inputs:
              azureSubscription: 'gamer-uncle-dev-sc'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                echo "Waiting for Function App to be ready after deployment..."
                sleep 60
                
                echo "Checking Function App status..."
                az functionapp show \
                  --name gamer-uncle-dev-function \
                  --resource-group gamer-uncle-dev-rg \
                  --query "{state:state,runtime:linuxFxVersion,kind:kind}" -o table
                
                echo "Listing deployed functions..."
                FUNCTIONS=$(az functionapp function list \
                  --name gamer-uncle-dev-function \
                  --resource-group gamer-uncle-dev-rg \
                  --query "[].name" -o tsv 2>/dev/null || echo "")
                
                if [[ -z "$FUNCTIONS" ]]; then
                  echo "❌ No functions found. Waiting and retrying..."
                  sleep 30
                  FUNCTIONS=$(az functionapp function list \
                    --name gamer-uncle-dev-function \
                    --resource-group gamer-uncle-dev-rg \
                    --query "[].name" -o tsv 2>/dev/null || echo "")
                fi
                
                if [[ -z "$FUNCTIONS" ]]; then
                  echo "❌ No functions deployed! Check deployment logs"
                  exit 1
                else
                  echo "✅ Found functions: $FUNCTIONS"
                fi
                
                # Get function key
                echo "Getting Function App host key..."
                HOST_KEY=$(az functionapp keys list \
                  --name gamer-uncle-dev-function \
                  --resource-group gamer-uncle-dev-rg \
                  --query "masterKey" -o tsv)
                
                if [[ -z "$HOST_KEY" ]]; then
                  echo "❌ Could not get function key"
                  exit 1
                fi
                
                # Trigger function if it exists
                if [[ "$FUNCTIONS" == *"GameSyncHttpStart"* ]]; then
                  echo "✅ GameSyncHttpStart function found, triggering..."
                  
                  RESPONSE=$(curl -s -X POST \
                    "https://gamer-uncle-dev-function.azurewebsites.net/api/GameSyncHttpStart?code=$HOST_KEY" \
                    -H "Content-Type: application/json" \
                    -d '{}' \
                    -w "\nHTTP_CODE:%{http_code}" \
                    --include)
                  
                  echo "Response:"
                  echo "$RESPONSE"
                  
                  HTTP_CODE=$(echo "$RESPONSE" | grep -o "HTTP_CODE:[0-9]*" | cut -d: -f2)
                  
                  if [[ "$HTTP_CODE" == "2"* ]]; then
                    echo "✅ Function triggered successfully!"
                  else
                    echo "❌ Function trigger failed with status: $HTTP_CODE"
                    exit 1
                  fi
                else
                  echo "❌ GameSyncHttpStart function not found"
                  echo "Available functions: $FUNCTIONS"
                  exit 1
                fi

- stage: DevDeployMobile
  displayName: 'Dev Deploy Mobile'
  dependsOn: 
    - DevBuild
    - DevTest
  condition: |
    and(
      succeeded(), 
      ne(variables['Build.Reason'], 'PullRequest'),
      or(
        contains(variables['Build.SourceVersionMessage'], 'apps/mobile'),
        eq(variables['Build.SourceBranchName'], 'main')
      )
    )

  jobs:
  - deployment: DeployMobileApp
    displayName: 'Deploy Mobile Web App'
    environment: 'Dev'
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: dropMobile

          - task: ExtractFiles@1
            displayName: 'Extract Mobile Build'
            inputs:
              archiveFilePatterns: '$(Pipeline.Workspace)/dropMobile/mobile-web-build.zip'
              destinationFolder: '$(Pipeline.Workspace)/mobile-extracted'
              cleanDestinationFolder: true

          # This step could be used to deploy to Azure Static Web Apps or similar
          - script: |
              echo "Mobile web build extracted to: $(Pipeline.Workspace)/mobile-extracted"
              echo "Contents:"
              ls -la $(Pipeline.Workspace)/mobile-extracted/
              echo "Mobile web app is ready for deployment to hosting service"
            displayName: 'Verify Mobile Build Extraction'

          # Add actual deployment steps here when you have a hosting target
          # Example for Azure Static Web Apps:
          # - task: AzureStaticWebApp@0
          #   inputs:
          #     app_location: '$(Pipeline.Workspace)/mobile-extracted'
          #     api_location: ''
          #     output_location: ''
          #     azure_static_web_apps_api_token: $(AZURE_STATIC_WEB_APPS_API_TOKEN)

- stage: DevTest
  displayName: 'Dev Test'
  dependsOn: DevBuild
  jobs:
  - job: TestApiJob
    displayName: 'Run API Tests'
    condition: |
      or(
        contains(variables['Build.SourceVersionMessage'], 'services/api'),
        contains(variables['Build.SourceVersionMessage'], 'services/tests'),
        eq(variables['Build.SourceBranchName'], 'main')
      )
    steps:
    - task: UseDotNet@2
      inputs:
        packageType: 'sdk'
        version: '8.x'
        installationPath: $(Agent.ToolsDirectory)/dotnet

    - script: dotnet restore services/tests/api/GamerUncle.Api.Tests.csproj
      displayName: 'Restore API Test Dependencies'

    - script: dotnet test services/tests/api/GamerUncle.Api.Tests.csproj --configuration $(buildConfiguration) --logger trx --results-directory $(Agent.TempDirectory)
      displayName: 'Run API Unit Tests'

    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'VSTest'
        testResultsFiles: '$(Agent.TempDirectory)/*.trx'
        failTaskOnFailedTests: true
      displayName: 'Publish API Test Results'

  - job: TestPipelineJob
    displayName: 'Run Pipeline Tests'
    condition: |
      or(
        contains(variables['Build.SourceVersionMessage'], 'pipelines/'),
        eq(variables['Build.SourceBranchName'], 'main')
      )
    steps:
    - task: UseDotNet@2
      inputs:
        packageType: 'sdk'
        version: '8.x'
        installationPath: $(Agent.ToolsDirectory)/dotnet

    - script: dotnet restore pipelines/tests/GamerUncle.Pipeline.Tests.csproj
      displayName: 'Restore Pipeline Test Dependencies'

    - script: dotnet test pipelines/tests/GamerUncle.Pipeline.Tests.csproj --configuration $(buildConfiguration) --logger trx --results-directory $(Agent.TempDirectory)
      displayName: 'Run Pipeline Validation Tests'

    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'VSTest'
        testResultsFiles: '$(Agent.TempDirectory)/*.trx'
        failTaskOnFailedTests: true
      displayName: 'Publish Pipeline Test Results'

  - job: TestMobileJob
    displayName: 'Run Mobile Tests'
    condition: |
      or(
        contains(variables['Build.SourceVersionMessage'], 'apps/mobile'),
        eq(variables['Build.SourceBranchName'], 'main')
      )
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '18.x'
      displayName: 'Install Node.js'

    - script: |
        cd $(mobileProject)
        npm install
      displayName: 'Install Mobile Dependencies'

    - script: |
        cd $(mobileProject)
        npm run test --if-present
      displayName: 'Run Mobile Tests'
      continueOnError: true
