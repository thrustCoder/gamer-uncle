trigger:
  branches:
    include:
      - main

pr:
  branches:
    include:
      - main

pool:
  vmImage: 'ubuntu-latest'

variables:
  buildConfiguration: 'Release'
  apiProject: 'services/api/GamerUncle.Api.csproj'
  functionAppProject: 'services/functions/GamerUncle.Function.BggSync/GamerUncle.Function.BggSync.csproj'
  publishOutputApiProject: '$(Build.ArtifactStagingDirectory)/publish/api'
  publishOutputFunctionProject: '$(Build.ArtifactStagingDirectory)/publish/function'

stages:
- stage: DevBuild
  displayName: 'Dev Build'
  jobs:
  - job: BuildJob
    displayName: 'Build and Publish Artifacts'
    steps:
    - task: UseDotNet@2
      inputs:
        packageType: 'sdk'
        version: '8.x'
        installationPath: $(Agent.ToolsDirectory)/dotnet

    - script: dotnet restore $(apiProject)
      displayName: 'Restore Dependencies'

    - script: dotnet build $(apiProject) --configuration $(buildConfiguration) --no-restore
      displayName: 'Build Project'

    - script: dotnet publish $(apiProject) --configuration $(buildConfiguration) --output $(publishOutputApiProject) --no-build
      displayName: 'Publish Project'

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(publishOutputApiProject)'
        ArtifactName: 'dropApi'

    - script: dotnet restore $(functionAppProject)
      displayName: 'Restore Dependencies'

    - script: dotnet build $(functionAppProject) --configuration $(buildConfiguration) --no-restore
      displayName: 'Build Function App'

    - script: dotnet publish $(functionAppProject) --configuration $(buildConfiguration) --output $(publishOutputFunctionProject) --no-build
      displayName: 'Publish Function App'

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(publishOutputFunctionProject)'
        ArtifactName: 'dropFunction'

- stage: DevDeploy
  displayName: 'Dev Deploy'
  dependsOn: DevBuild
  condition: |
    and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))

  jobs:
  - deployment: DeployWebApp
    environment: 'Dev'
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: dropApi

          - task: AzureWebApp@1
            inputs:
              azureSubscription: 'gamer-uncle-dev-sc'
              appType: 'webApp'
              appName: 'gamer-uncle-dev-app-svc'
              package: '$(Pipeline.Workspace)/dropApi'

  - deployment: DeployFunctionApp
    environment: 'Dev'
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: dropFunction

          - task: AzureCLI@2
            displayName: 'Configure Function App Settings'
            inputs:
              azureSubscription: 'gamer-uncle-dev-sc'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                echo "Setting Function App application settings..."
                az functionapp config appsettings set \
                  --name gamer-uncle-dev-function \
                  --resource-group gamer-uncle-dev-rg \
                  --settings \
                    'COSMOS_ENDPOINT=https://gamer-uncle-dev-cosmos.documents.azure.com:443/' \
                    'AZURE_TENANT_ID=c88223a3-60b3-4697-9374-209fc154bdf1' \
                    'SyncGameCount=10'
                
                echo "Verifying settings were applied..."
                az functionapp config appsettings list \
                  --name gamer-uncle-dev-function \
                  --resource-group gamer-uncle-dev-rg \
                  --query "[?name=='COSMOS_ENDPOINT' || name=='AZURE_TENANT_ID' || name=='SyncGameCount']" \
                  -o table

          - task: AzureCLI@2
            displayName: 'Deploy Function App (Flex Consumption)'
            inputs:
              azureSubscription: 'gamer-uncle-dev-sc'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                echo "Deploying to Flex Consumption Function App..."
                cd $(Pipeline.Workspace)/dropFunction
                
                # Create deployment package
                zip -r ../functionapp.zip .
                
                # Deploy using Azure CLI (supports Flex Consumption)
                az functionapp deployment source config-zip \
                  --resource-group gamer-uncle-dev-rg \
                  --name gamer-uncle-dev-function \
                  --src ../functionapp.zip
                
                echo "Deployment completed"

          - task: AzureCLI@2
            displayName: 'Trigger Function via HTTP'
            inputs:
              azureSubscription: 'gamer-uncle-dev-sc'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                echo "Checking Function App status..."
                az functionapp show \
                  --name gamer-uncle-dev-function \
                  --resource-group gamer-uncle-dev-rg \
                  --query "{state:state,runtime:linuxFxVersion,kind:kind}" -o table
                
                echo "Listing deployed functions..."
                az functionapp function list \
                  --name gamer-uncle-dev-function \
                  --resource-group gamer-uncle-dev-rg \
                  --query "[].{Name:name,TriggerType:config.bindings[0].type}" -o table || echo "No functions found or error listing functions"
                
                echo "Attempting to get Function App host key..."
                HOST_KEY=$(az functionapp keys list \
                  --name gamer-uncle-dev-function \
                  --resource-group gamer-uncle-dev-rg \
                  --query "functionKeys.default" -o tsv 2>/dev/null || echo "FAILED")
                
                if [[ "$HOST_KEY" == "FAILED" ]] || [[ -z "$HOST_KEY" ]]; then
                  echo "❌ Failed to get host key. Trying master key..."
                  HOST_KEY=$(az functionapp keys list \
                    --name gamer-uncle-dev-function \
                    --resource-group gamer-uncle-dev-rg \
                    --query "masterKey" -o tsv 2>/dev/null || echo "FAILED")
                fi
                
                if [[ "$HOST_KEY" == "FAILED" ]] || [[ -z "$HOST_KEY" ]]; then
                  echo "❌ Cannot get function keys. Function App might not be ready."
                  echo "Checking Function App deployment status..."
                  az functionapp deployment source show \
                    --name gamer-uncle-dev-function \
                    --resource-group gamer-uncle-dev-rg || echo "No deployment info available"
                  exit 1
                fi
                
                echo "✅ Got function key successfully"
                echo "Waiting for Function App to be ready..."
                sleep 30
                
                echo "Testing basic Function App health..."
                curl -s "https://gamer-uncle-dev-function.azurewebsites.net/api/health" || echo "Health endpoint not available"
                
                echo "Triggering GameSyncHttpStart function..."
                RESPONSE=$(curl -s -X POST \
                  "https://gamer-uncle-dev-function.azurewebsites.net/api/GameSyncHttpStart?code=$HOST_KEY" \
                  -H "Content-Type: application/json" \
                  -d '{}' \
                  -w "\nHTTP_CODE:%{http_code}" \
                  --include)
                
                echo "Full Response:"
                echo "$RESPONSE"
                
                # Get just the HTTP code for validation
                HTTP_CODE=$(echo "$RESPONSE" | grep -o "HTTP_CODE:[0-9]*" | cut -d: -f2)
                echo "HTTP Status Code: $HTTP_CODE"
                
                if [[ "$HTTP_CODE" == "404" ]]; then
                  echo "❌ Function not found. Available functions:"
                  az functionapp function list \
                    --name gamer-uncle-dev-function \
                    --resource-group gamer-uncle-dev-rg \
                    --query "[].name" -o table || echo "Could not list functions"
                  
                  echo "Check if the function name is correct and deployment was successful"
                  exit 1
                elif [[ "$HTTP_CODE" == "2"* ]]; then
                  echo "✅ Function triggered successfully!"
                else
                  echo "❌ Function trigger failed with status: $HTTP_CODE"
                  echo "Check the Function App logs in Azure Portal for detailed error information"
                  exit 1
                fi
